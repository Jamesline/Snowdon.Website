@inject Services.AppDataService AppDataService

<h5>Decode</h5>
<button @onclick=DecodeFile class="btn btn-primary">Decode GECO</button>
<p> </p>
@if (filedecoded)
{
    <h3>Review results</h3>
    <table class="table table-striped">
        @foreach (var Row in GecoDisplayTable.Body)
        {
            @if (Row.Cells[0].Value == "CUSTOMERS")
            {
                <thead class="thead-dark">
                    <tr>
                        @foreach (var cell in Row.Cells)
                        {
                            <th>
                                <p>@cell.Value</p>
                            </th>
                        }
                    </tr>
                </thead>
            }
            else if (Row.Cells[0].Value == "TOTAL")
            {
                <tbody>
                    <tr class=" table-success">
                        @foreach (var cell in Row.Cells)
                        {
                            <td>
                                <p>@cell.Value</p>
                            </td>
                        }
                    </tr>
                </tbody>
            }
            else
            {
                <tbody>
                    <tr>
                        @foreach (var cell in Row.Cells)
                        {
                            <td>
                                <p>@cell.Value</p>
                            </td>
                        }
                    </tr>
                </tbody>
            }
        }
    </table>
}

@code {
    protected override void OnInitialized()
    {
        AppDataService.OnChange += StateHasChanged;
    }

    Services.EPPlusBuilder.TablesModel Tables = new Services.EPPlusBuilder.TablesModel();
    Services.EPPlusBuilder.TablesModel.RowModel GecoRowModel = new Services.EPPlusBuilder.TablesModel.RowModel();
    Services.EPPlusBuilder.TablesModel.TableModel GecoTable = new Services.EPPlusBuilder.TablesModel.TableModel();
    Services.EPPlusBuilder.TablesModel.TableModel GecoDisplayTable = new Services.EPPlusBuilder.TablesModel.TableModel();
    Services.GecoReturns gecoReturns = new Services.GecoReturns();
    bool filedecoded;
    string decodeStatus;

    async Task DecodeFile()
    {
        Console.WriteLine("Decode routine called....");
        try
        {
            var fileInRam = AppDataService.FileMem;
            using (var package = new OfficeOpenXml.ExcelPackage(fileInRam))
            {
                if (package != null)
                {
                    Tables = Services.EPPlusBuilder.Parse(package, false);
                }
            }

            GecoTable = Common.FetchTableByName(Tables, "Profit & Loss");
            if(GecoTable != null)
            {
                Console.WriteLine("Geco Table not null");
                var count = GecoTable.Body.Count();
                Console.WriteLine("Geco Row Count: " + count);
            }
        }
        catch (Exception ex)
        {
            filedecoded = false;
            decodeStatus = "File failed decoding: " + ex.Message;
        }

        GecoDisplayTable = Services.GecoBuilder.BuildGeco(GecoTable);
                if (GecoDisplayTable==null)
                {
                    filedecoded = false;
                }
        filedecoded = false;
    }

}